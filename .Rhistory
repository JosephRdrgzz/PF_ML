prob1 <- read.csv("datosTF.csv", header = TRUE)
prob1$P4 <- ifelse(prob1$P4 == 1, "SI", "NO")
prob1$P4 <- factor(prob1$P4, levels = c("NO", "SI"))
str(prob1)
# ----------- Edad
ggplot(prob1, aes(x = P4, y = EDAD, fill = P4)) +
geom_boxplot() +
labs(title = "Distribución de Edad por respuesta en P4",
x = "¿Lee información nutrimental?",
y = "Edad") +
scale_fill_manual(values = c("NO" = "purple", "SI" = "forestgreen")) +
theme_minimal()
# ----------- P1, calorías estimadas
ggplot(prob1, aes(x = as.factor(P1), fill = P4)) +
geom_bar(position = "fill") +
labs(title = "Distribución de P1 (calorías) por respuesta en P4",
x = "Categoría de calorías estimadas",
y = "Proporción",
fill = "P4") +
theme_minimal()
# ----------- P3, tabla nutrimental
ggplot(prob1, aes(x = as.factor(P3), fill = P4)) +
geom_bar(position = "fill") +
labs(title = "Conocimiento de info nutrimental (P3) por P4",
x = "P3: ¿Conoce info nutrimental?",
y = "Proporción",
fill = "P4") +
theme_minimal()
# ----------- Sexo
ggplot(prob1, aes(x = as.factor(SEXO), fill = P4)) +
geom_bar(position = "fill") +
labs(title = "Distribución de Sexo por respuesta en P4",
x = "Sexo (1 = Hombre, 2 = Mujer)",
y = "Proporción",
fill = "P4") +
theme_minimal()
# ----------- Región
ggplot(prob1, aes(x = as.factor(REGION), fill = P4)) +
geom_bar(position = "fill") +
labs(title = "Distribución por Región geográfica y lectura P4",
x = "Región (1 = Norte, ..., 4 = Sur)",
y = "Proporción",
fill = "P4") +
theme_minimal()
# ----------- Dominio
ggplot(prob1, aes(x = as.factor(DOMINIO), fill = P4)) +
geom_bar(position = "fill") +
labs(title = "Distribución de zona (Dominio) por P4",
x = "Dominio (1 = Urbano, 2 = Rural)",
y = "Proporción",
fill = "P4") +
theme_minimal()
# ----------- Estrato sociodemográfico
ggplot(prob1, aes(x = as.factor(ESTRATO), fill = P4)) +
geom_bar(position = "fill") +
labs(title = "Distribución por nivel socioeconómico (Estrato) y P4",
x = "Estrato (1 = Bajo ... 4 = Alto)",
y = "Proporción",
fill = "P4") +
theme_minimal()
# ----------- Entidad Federativa (ENT)
ggplot(prob1, aes(x = as.factor(ENT), fill = P4)) +
geom_bar(position = "fill") +
labs(title = "Distribución por Entidad Federativa y lectura de info nutrimental (P4)",
x = "Entidad federativa (1 a 32)",
y = "Proporción",
fill = "P4") +
theme_minimal()
# Leer los datos originales
datos <- read.csv("datosTF.csv", header = TRUE)
# Copiar los datos a un nuevo data frame para trabajar
pruebas <- datos
# Paso 1: Identificar donde P3 == 1 (sí conoce) y P4 es NA o distinto de 1 o 2
# En esos casos, asumiremos que P4 debe ser 1 (sí lee)
pruebas$P4 <- ifelse(pruebas$P3 == 1 & (is.na(pruebas$P4) | !(pruebas$P4 %in% c(1, 2))),
1,
pruebas$P4)
# Paso 2: Eliminar la variable P3
pruebas$P3 <- NULL
# Confirmar los cambios (opcional)
str(pruebas)
# Leer los datos originales
datos <- read.csv("datosTF.csv", header = TRUE)
# Copiar los datos a un nuevo data frame para trabajar
pruebas <- datos
# Paso 2: Eliminar la variable P3
pruebas$P3 <- NULL
# Confirmar los cambios (opcional)
str(pruebas)
pruebas$P1[pruebas$P1 == 9] <- NA
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Leer los datos originales
datos <- read.csv("datosTF.csv", header = TRUE)
# Copiar los datos a un nuevo data frame para trabajar
pruebas <- datos
# Eliminar las columnas
pruebas$P3 <- NULL
pruebas$EST_DIS <- NULL
pruebas$ENT <- NULL
pruebas$UPM_DIS <- NULL
# Confirmar los cambios
str(pruebas)
# Leer los datos originales
datos <- read.csv("datosTF.csv", header = TRUE)
# Copiar los datos a un nuevo data frame para trabajar
pruebas <- datos
# Eliminar las columnas
pruebas$P3 <- NULL
pruebas$EST_DIS <- NULL
pruebas$ENT <- NULL
pruebas$UPM_DIS <- NULL
# Crear nueva columna Edad_grupo
pruebas <- pruebas |>
mutate(Edad_grupo = case_when(
EDAD >= 20 & EDAD <= 34 ~ "20–34",
EDAD >= 35 & EDAD <= 49 ~ "35–49",
EDAD >= 50 & EDAD <= 64 ~ "50–64",
EDAD >= 65 & EDAD <= 80 ~ "65–80",
EDAD > 80              ~ "80+"
))
# Confirmar los cambios
str(pruebas)
pruebas$P1[pruebas$P1 == 9] <- NA
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Leer los datos originales
datos <- read.csv("datosTF.csv", header = TRUE)
# Copiar los datos a un nuevo data frame para trabajar
pruebas <- datos
# Eliminar las columnas
pruebas$P3 <- NULL
pruebas$EST_DIS <- NULL
pruebas$ENT <- NULL
pruebas$UPM_DIS <- NULL
# Crear nueva columna Edad_grupo
pruebas <- pruebas |>
mutate(Edad_grupo = case_when(
EDAD >= 20 & EDAD <= 34 ~ "20–34",
EDAD >= 35 & EDAD <= 49 ~ "35–49",
EDAD >= 50 & EDAD <= 64 ~ "50–64",
EDAD >= 65 & EDAD <= 80 ~ "65–80",
EDAD > 80              ~ "80+"
))
colSums(is.na(pruebas))
# Confirmar los cambios
str(pruebas)
pruebas$P1[pruebas$P1 == 9] <- NA
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Leer los datos originales
datos <- read.csv("datosTF.csv", header = TRUE)
# Copiar los datos a un nuevo data frame para trabajar
pruebas <- datos
# Eliminar las columnas
pruebas$EST_DIS <- NULL
pruebas$ENT <- NULL
pruebas$UPM_DIS <- NULL
# Crear nueva columna Edad_grupo
pruebas <- pruebas |>
mutate(Edad_grupo = case_when(
EDAD >= 20 & EDAD <= 34 ~ "20–34",
EDAD >= 35 & EDAD <= 49 ~ "35–49",
EDAD >= 50 & EDAD <= 64 ~ "50–64",
EDAD >= 65 & EDAD <= 80 ~ "65–80",
EDAD > 80              ~ "80+"
))
colSums(is.na(pruebas))
# Confirmar los cambios
str(pruebas)
pruebas$P1[pruebas$P1 == 9] <- NA
pruebas$P1[pruebas$P3.isNA] <- 2
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Leer los datos originales
datos <- read.csv("datosTF.csv", header = TRUE)
# Copiar los datos a un nuevo data frame para trabajar
pruebas <- datos
# Eliminar las columnas
pruebas$EST_DIS <- NULL
pruebas$ENT <- NULL
pruebas$UPM_DIS <- NULL
# Crear nueva columna Edad_grupo
pruebas <- pruebas |>
mutate(Edad_grupo = case_when(
EDAD >= 20 & EDAD <= 34 ~ "20–34",
EDAD >= 35 & EDAD <= 49 ~ "35–49",
EDAD >= 50 & EDAD <= 64 ~ "50–64",
EDAD >= 65 & EDAD <= 80 ~ "65–80",
EDAD > 80              ~ "80+"
))
colSums(is.na(pruebas))
# Confirmar los cambios
str(pruebas)
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Paso 4: Calcular correlaciones con P4_bin usando pares completos
correlaciones <- cor(df_filtrado$P4_bin, vars_numericas, use = "pairwise.complete.obs")
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Paso 4: Calcular correlaciones con P4_bin usando pares completos
correlaciones <- cor(pruebas$P4_bin, vars_numericas, use = "pairwise.complete.obs")
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Paso 4: Calcular correlaciones con P4_bin usando pares completos
correlaciones <- cor(pruebas$P4_bin, vars_numericas, use = "pairwise.complete.obs")
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Paso 4: Calcular correlaciones con P4_bin usando pares completos
correlaciones <- cor(pruebas$P4_bin, vars_numericas, use = "pairwise.complete.obs")
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Paso 4: Calcular correlaciones con P4_bin usando pares completos
correlaciones <- cor(pruebas$P4_bin, vars_numericas, use = "pairwise.complete.obs")
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Paso 4: Calcular correlaciones con P4_bin usando pares completos
correlaciones <- cor(pruebas$P4, vars_numericas, use = "pairwise.complete.obs")
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Paso 4: Calcular correlaciones con P4_bin usando pares completos
correlaciones <- cor(pruebas$P4, vars_numericas, use = "pairwise.complete.obs")
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Paso 4: Calcular correlaciones con P4_bin usando pares completos
# Crear subconjunto de variables numéricas relevantes (excepto P7 que no se quiere usar aquí)
vars_numericas <- pruebas %>%
select(P1, P3, EDAD, SEXO, DOMINIO, REGION, ESTRATO)
correlaciones <- cor(pruebas$P4, vars_numericas, use = "pairwise.complete.obs")
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Paso 4: Calcular correlaciones con P4_bin usando pares completos
# Crear subconjunto de variables numéricas relevantes (excepto P7 que no se quiere usar aquí)
vars_numericas <- pruebas %>%
select(P1, P3, EDAD, SEXO, DOMINIO, REGION, ESTRATO)
correlaciones <- cor(pruebas$P4, vars_numericas, use = "pairwise.complete.obs")
sapply(vars_numericas, function(x) length(unique(na.omit(x))))
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Convertir P4 a binaria si es factor
pruebas$P4_bin <- ifelse(pruebas$P4 == "SI" | pruebas$P4 == 1, 1,
ifelse(pruebas$P4 == "NO" | pruebas$P4 == 2, 0, NA))
# Correlación con pares completos
cor.test(pruebas$P4_bin, as.numeric(pruebas$P3), use = "complete.obs")
sapply(vars_numericas, function(x) length(unique(na.omit(x))))
table(pruebas$P3, useNA = "ifany")
table(pruebas$P3, useNA = "ifany")
# Leer los datos originales
datos <- read.csv("datosTF.csv", header = TRUE)
# Copiar los datos a un nuevo data frame para trabajar
pruebas <- datos
# Eliminar las columnas
pruebas$EST_DIS <- NULL
pruebas$ENT <- NULL
pruebas$UPM_DIS <- NULL
# Crear nueva columna Edad_grupo
pruebas <- pruebas |>
mutate(Edad_grupo = case_when(
EDAD >= 20 & EDAD <= 34 ~ "20–34",
EDAD >= 35 & EDAD <= 49 ~ "35–49",
EDAD >= 50 & EDAD <= 64 ~ "50–64",
EDAD >= 65 & EDAD <= 80 ~ "65–80",
EDAD > 80              ~ "80+"
))
colSums(is.na(pruebas))
# Confirmar los cambios
str(pruebas)
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Convertir P4 a binaria si es factor
pruebas$P4_bin <- ifelse(pruebas$P4 == "SI" | pruebas$P4 == 1, 1,
ifelse(pruebas$P4 == "NO" | pruebas$P4 == 2, 0, NA))
# Correlación con pares completos
cor.test(pruebas$P4_bin, as.numeric(pruebas$P3), use = "complete.obs")
sapply(vars_numericas, function(x) length(unique(na.omit(x))))
pruebas$P1[pruebas$P1 == 9] <- NA
# Definir la función
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
pruebas <- convertir_na_a_no_p3(pruebas)
pruebas$P4[pruebas$P4 == 9] <- NA
pruebas$P7[pruebas$P7 == 9] <- NA
# Contar valores NA por columna
colSums(is.na(pruebas))
# Convertir P4 a binaria si es factor
pruebas$P4_bin <- ifelse(pruebas$P4 == "SI" | pruebas$P4 == 1, 1,
ifelse(pruebas$P4 == "NO" | pruebas$P4 == 2, 0, NA))
# Correlación con pares completos
cor.test(pruebas$P4_bin, as.numeric(pruebas$P3), use = "complete.obs")
table(pruebas$P3, useNA = "ifany")
# Leer datos originales
datos <- read.csv("datosTF.csv", header = TRUE)
# Reemplazar los 9 por NA en P3 y P4
datos$P3[datos$P3 == 9] <- NA
datos$P4[datos$P4 == 9] <- NA
# Crear P4_bin
datos$P4_bin <- ifelse(datos$P4 == 1, 1,
ifelse(datos$P4 == 2, 0, NA))
# Calcular correlación con pares completos
cor.test(datos$P4_bin, datos$P3, use = "complete.obs")
table(datos$P3, useNA = "ifany")
# Asegúrate de que estás empezando desde datos originales
datos <- read.csv("datosTF.csv", header = TRUE)
# Reemplazar 9 por NA en P3 y P4
datos$P3[datos$P3 == 9] <- NA
datos$P4[datos$P4 == 9] <- NA
# Crear variable binaria de P4 (SI = 1, NO = 0)
datos$P4_bin <- ifelse(datos$P4 == 1, 1,
ifelse(datos$P4 == 2, 0, NA))
# Verifica que hay más de un valor en P4_bin y P3
table(datos$P4_bin, useNA = "ifany")
table(datos$P3, useNA = "ifany")
# Calcular correlación con pares completos
cor.test(datos$P4_bin, datos$P3, use = "complete.obs")
sum(!is.na(datos$P4_bin) & !is.na(datos$P3))
sum(!is.na(datos$P4_bin) & !is.na(datos$P3))
sum(!is.na(datos$P4_bin) & !is.na(datos$P3))
# Reiniciar desde cero
datos <- read.csv("datosTF.csv", header = TRUE)
# Reemplazar 9 por NA
datos$P3[datos$P3 == 9] <- NA
datos$P4[datos$P4 == 9] <- NA
# Crear variable binaria
datos$P4_bin <- ifelse(datos$P4 == 1, 1,
ifelse(datos$P4 == 2, 0, NA))
# Filtrar solo filas completas
datos_completo <- datos[!is.na(datos$P4_bin) & !is.na(datos$P3), ]
# Verificar cuántas hay
nrow(datos_completo)
# Correlación ahora sí
cor.test(datos_completo$P4_bin, datos_completo$P3)
sum(!is.na(datos$P4_bin) & !is.na(datos$P3))
table(datos_completo$P3)
# Reiniciar desde cero
datos <- read.csv("datosTF.csv", header = TRUE)
# Reemplazar 9 por NA
datos$P3[datos$P3 == 9] <- NA
datos$P4[datos$P4 == 9] <- NA
convertir_na_a_no_p3 <- function(data) {
data$P3 <- ifelse(is.na(data$P3), 2, data$P3)
return(data)
}
datos <- convertir_na_a_no_p3(datos)
# Crear variable binaria
datos$P4_bin <- ifelse(datos$P4 == 1, 1,
ifelse(datos$P4 == 2, 0, NA))
# Filtrar solo filas completas
datos_completo <- datos[!is.na(datos$P4_bin) & !is.na(datos$P3), ]
# Verificar cuántas hay
nrow(datos_completo)
# Correlación ahora sí
cor.test(datos_completo$P4_bin, datos_completo$P3)
sum(!is.na(datos$P4_bin) & !is.na(datos$P3))
table(datos_completo$P3)
